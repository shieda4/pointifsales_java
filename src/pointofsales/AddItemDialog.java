/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package pointofsales;

import java.awt.event.KeyEvent;
import java.sql.ResultSet;
import java.sql.SQLException;
import javax.swing.JOptionPane;

/**
 *
 * @author shieda
 */
public class AddItemDialog extends javax.swing.JDialog {

    /**
     * Creates new form AddItemDialog
     */
    int Transaction, Product;

    public AddItemDialog(java.awt.Frame parent, boolean modal, int Transaction, int Product, String Description) {
        super(parent, modal);
        this.Transaction = Transaction;
        this.Product = Product;
        initComponents();
        itemTextField.setText(Description);
        itemTextField.setEditable(false);
        quantityTextField.requestFocus();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        itemTextField = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        quantityTextField = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        addButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        getContentPane().setLayout(new java.awt.GridLayout(0, 1));

        jPanel1.setLayout(new java.awt.GridLayout(0, 1));

        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("ITEM");
        jPanel1.add(jLabel1);

        itemTextField.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        jPanel1.add(itemTextField);

        jLabel3.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel3.setText("QUANTITY");
        jPanel1.add(jLabel3);

        quantityTextField.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        quantityTextField.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                quantityTextFieldFocusLost(evt);
            }
        });
        quantityTextField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                quantityTextFieldKeyPressed(evt);
            }
        });
        jPanel1.add(quantityTextField);

        jLabel4.setText("TOTAL: ");
        jPanel1.add(jLabel4);

        addButton.setText("ADD");
        addButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                addButtonMouseClicked(evt);
            }
        });
        jPanel1.add(addButton);

        getContentPane().add(jPanel1);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void addButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_addButtonMouseClicked
        this._submit();
    }//GEN-LAST:event_addButtonMouseClicked

    private void quantityTextFieldKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_quantityTextFieldKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ESCAPE) {
            this.setVisible(false);
            this.dispose();
        }
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            this._submit();
        }
    }//GEN-LAST:event_quantityTextFieldKeyPressed

    private void quantityTextFieldFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_quantityTextFieldFocusLost
        quantityTextField.requestFocus();
    }//GEN-LAST:event_quantityTextFieldFocusLost

    private void _submit() {
        try {
            DatabaseConnection dbConn = new DatabaseConnection();
            String stockQuery = "SELECT Stock FROM Product WHERE Id = " + this.Product + ";";
            ResultSet stockResultSet = dbConn.getResultQuery(stockQuery);
            int itemStock = 0;
            while (stockResultSet.next()) {
                itemStock = stockResultSet.getInt("Stock");
            }

            try {
                String existingItem = "SELECT Id FROM Item WHERE Item.Product = " + this.Product + " AND Item.Transaction = " + this.Transaction + ";";
                ResultSet existingItemResultSet = dbConn.getResultQuery(existingItem);
                Integer existingItemId = null;
                while (existingItemResultSet.next()) {
                    existingItemId = existingItemResultSet.getInt("Id");
                }
                int quantity = Integer.parseInt(quantityTextField.getText());
                if (quantity > 0) {
                    if (itemStock >= quantity) {
                        String update = "UPDATE Product SET Stock = Stock-" + quantity + " WHERE Id = " + this.Product + ";";
                        dbConn.executeSQL(update);
                        if (existingItemId != null) {
                            update = "UPDATE Item SET Quantity = Quantity+" + quantity + " WHERE Id = " + existingItemId + ";";
                            dbConn.executeSQL(update);
                        } else {
                            String insert = "INSERT INTO Item(Transaction, Product, Quantity) VALUES(" + this.Transaction + "," + this.Product + "," + quantity + ");";
                            dbConn.executeSQL(insert);
                        }

                        this.setVisible(false);
                        this.dispose();
                    } else {
                        quantityTextField.setText("");
                        JOptionPane.showMessageDialog(null, "Not Enough Stock", "ERROR", JOptionPane.ERROR_MESSAGE);
                    }
                } else {
                    quantityTextField.setText("");
                    JOptionPane.showMessageDialog(null, "Please Enter A Positive Number", "ERROR", JOptionPane.ERROR_MESSAGE);
                }

            } catch (NumberFormatException e) {
                quantityTextField.setText("");
                JOptionPane.showMessageDialog(null, "Only Accepts Numeric Input", "ERROR", JOptionPane.ERROR_MESSAGE);

            } finally {
                if (dbConn._getConnection() != null) {
                    dbConn.close();
                }
            }
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(null, ex.getMessage(), "ERROR", JOptionPane.ERROR_MESSAGE);
        }

    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addButton;
    private javax.swing.JTextField itemTextField;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JTextField quantityTextField;
    // End of variables declaration//GEN-END:variables
}
